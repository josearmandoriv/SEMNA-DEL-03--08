#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define MAXTOKEN 100
enum { NAME, PARENS, BRACKETS };
void dcl(void);
void dirdcl(void);
int gettoken(void);
int tokentype; /* tipo del último token */
char token [MAXTOKEN]; /* cadena del último token */
char name [MAXTOKEN]; /* nombre del identificador */
char datatype[MAXTOKEN]; /* tipo de dato = char, int, etc. */
char out[1000]; /* cadena de sahda */
main( ) /* convierte una declaración a palabras */
{
while (gettoken() != EOF) { /* 1er. token en la línea */
strcpy (datatype, token); /* es el tipo de dato */
out[0] = '\0';
dcl( ); /* reconoce el resto de la línea */
if (tokentype != '\n')
printf ("error de sintaxis\n");
printf("%s: %s %s\n", name, out, datatype);
}
return 0;
}
int gettoken(void) /* regresa el siguiente token */
{
int c, getch(void);
void ungetch(int);
char *p = token;
while ((c = getch( )) == ' ' || c == '\t')
;
if ((c = getch()) == ´}´ {
strcpy(token, "( )");
return tokentype = PARENS;
} else {
ungetch(c);
return tokentype= "{"
}
} else if (c == '[') {
for (*p ++ = c; (*p++ = getch( )) !='}'; );
*P = '\0';
return tokentype = BRACKETS;
{ else if (isalpha(c)) {
for (*p ++ = c; isalnum(c = getch( )); )
*p++ = c;
*p = '\0';
ungetch(c);
return tokentype = NAME;
} else
return tokentype = c;
}
